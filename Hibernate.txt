
JPA 
â†’ Is a Specification
â†’ Previously known as Java Persistence API, modern Java Applications using JPA
refer to it as Jakarta Persistence API because Java EE was moved to the Eclipse
foundation and was renamed to Jakarta EE

â†’ ORM - Object Relational Mapping
â†’ Hiberbate is an Implementation of JPA

â€¢ Session
â€¢ SessionFactory
â€¢ Context - A collection of instances/entities
	â—‹ We can create as many contexts as we want
â€¢ Auto-Increment strategy varies by databases
â€¢ JoinColumn annotation is used exclusively for relationships
  JoinColumn is used in the owner of the relationship; we need the annotation
  only if we need to customize the column name
  Remember - the owner of the relationship always has the foreign key

â€¢ Non Collection child types are by default fetched eagerly because in most
cases, fetching the child, together with the parent, is faster than firing 
separate queries for each

â—‹ @OneToOne(mappedBy = "passport")
  The value of mappedBy is the name of the FIELD of this entity on the owner

Persistence unit as RESOURCE_LOCAL or JTA?
==========================================

https://stackoverflow.com/questions/1962525/persistence-unit-as-resource-local-or-jta


JPA implementations have the choice of managing transactions themselves 
(RESOURCE_LOCAL), or having them managed by the application server's JTA 
implementation.

In most cases, RESOURCE_LOCAL is fine. This would use basic JDBC-level 
transactions. The downside is that the transaction is local to the JPA 
persistence unit, so if you want a transaction that spans multiple persistence 
units (or other databases), then RESOURCE_LOCAL may not be good enough.

JTA is also used for managing transactions across systems like JMS and JCA, 
but that's fairly exotic usage for most of us.

To use JTA, you need support for it in your application server, and also 
support from the JDBC driver.

--------------------------------------------

Comparing RESOURCE_LOCAL and JTA persistence contexts
With <persistence-unit transaction-type="RESOURCE_LOCAL"> YOU are responsible 
for EntityManager (PersistenceContext/Cache) creating and tracking...

You must use the EntityManagerFactory to get an EntityManager
The resulting EntityManager instance is a PersistenceContext/Cache
An EntityManagerFactory can be injected via the @PersistenceUnit annotation 
only (not @PersistenceContext)
You are not allowed to use @PersistenceContext to refer to a unit of type 
RESOURCE_LOCAL
You must use the EntityTransaction API to begin/commit around every call to 
your EntityManger
Calling entityManagerFactory.createEntityManager() twice results in two 
separate EntityManager instances and therefor two separate 
PersistenceContexts/Caches.
It is almost never a good idea to have more than one instance of an 
EntityManager in use (don't create a second one unless you've destroyed the 
first)


With <persistence-unit transaction-type="JTA"> the CONTAINER will do 
EntityManager (PersistenceContext/Cache) creating and tracking...

You cannot use the EntityManagerFactory to get an EntityManager
You can only get an EntityManager supplied by the container
An EntityManager can be injected via the @PersistenceContext annotation only 
(not @PersistenceUnit)
You are not allowed to use @PersistenceUnit to refer to a unit of type JTA
The EntityManager given by the container is a reference to the 
PersistenceContext/Cache associated with a JTA Transaction.
If no JTA transaction is in progress, the EntityManager cannot be used because 
there is no PersistenceContext/Cache.
Everyone with an EntityManager reference to the same unit in the same 
transaction will automatically have a reference to the same 
PersistenceContext/Cache
The PersistenceContext/Cache is flushed and cleared at JTA commit time



Entity

â€¢ Represents a Table where every record uniquely represents an entity
â€¢ Has to have an Id
â€¢ If the Table doesn't have a Primary Key then we need to have a Composite Key,
e.g. combining columns. Worst case, we need to combine all the columns.



One to Many
-----------

One Directional:

â€¢ The owner of the relationship is on the child table, the one with "many"; this
is where the foreign key is

The table with the foreign key column is said to be the owner of the 
relationship - this is on the side of many

â€¢ If the entity is mentioned on the parent then we need to mention the join 
column name

Bi-Directional relationship always requires a "mapped_by" attribute on the 
OneToMany annotation

In a Bi-Directional relationship, each side has its own cascading logic

Many to Many
------------

Join table does not map to anything in the ORM; it is used behind the scenes to
create the relationships


You will have to choose an owner; doesn't matter which table is chosen as the 
owner

In a bi-directional relationship, we can have different cascading operations on
both sides.

We shoud only use cascading operations that we need

When you add the Join Table to an Entity, that class behaves like the owner of 
the relationship. Configuring an @Entity class as an owner does not make a 
change in the Underlying Tables (in case we are doing an auto ddl).


ðŸ‘‰ Mapped By 	is on the Opposite Side of the Ownership of the relation
ðŸ‘‰ Join Table 	is on the Side of the Ownership 

MyAwesomePassword
C:\Users\tatha