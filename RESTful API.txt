𝐑𝐄𝐒𝐓𝐟𝐮𝐥 𝐀𝐏𝐈

Before we delve into the topic of RESTful API, we need to be familiar with a few
concepts

The following 2 concepts of "Anticipation of Change" and "Principle of
Generality" have been taken from -
https://www.d.umn.edu/~gshute/softeng/principles.html

𝙰𝚗𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚒𝚘𝚗 𝚘𝚏 𝙲𝚑𝚊𝚗𝚐𝚎

The principle of acticipation of change recognizes the complexity of the
learning process for both software developers and their clients.

•   Software aims to solve a problem which arises in some context/domain
•   Complex software problems cannot have the best possible solution quickly
•   General Approach is to begin with a reasonable solution and have the
    perfect/better solution later
•   Preliminary requirements need to be worked out early
•   It should be possible to make changes in the requirements and the solutions
    as learning progresses

Coupling

Coupling is a major obstacle to change. If two components are strongly coupled
then it is likely that changing one will not work without changing the other.

Cohesiveness

Cohesiveness has a positive effect on ease of change. Cohesive components are
easier to reuse when requirements change. If a component has several tasks
rolled up into one package, it is likely that it will need to be split up when
changes are made.

𝙿𝚛𝚒𝚗𝚌𝚒𝚙𝚕𝚎 𝚘𝚏 𝙶𝚎𝚗𝚎𝚛𝚊𝚕𝚒𝚝𝚢

•   Closely related to the principle of anticipation of change
→   Design Software that is free from unnatural Restrictions and Limitations.
→   Creating more abstract and reusable components and interfaces. A general
    interface is one that can handle a wide range of specific cases without
    requiring specialized mechanisms for each.
•   Examples
        - The use of two digit year numbers, which led to the Y2K problem
        - Software to address the general need vs. software that replicates how
          someone is addressing the need

𝙷𝚢𝚙𝚎𝚛𝙼𝚎𝚍𝚒𝚊

Hypermedia is a type of multimedia that features interactive elements, such as
hypertext, buttons, or interactive images and videos, allowing users to
navigate and engage with content in a non-linear manner.

𝗛𝗔𝗧𝗘𝗢𝗔𝗦

The term was coined in 2000 by Roy Fielding in his doctoral dissertation.

Please refer to - https://en.wikipedia.org/wiki/HATEOAS

📌   A REST client 𝒏𝒆𝒆𝒅𝒔 𝒍𝒊𝒕𝒕𝒍𝒆 𝒕𝒐 𝒏𝒐 𝒑𝒓𝒊𝒐𝒓 𝒌𝒏𝒐𝒘𝒍𝒆𝒅𝒈𝒆 about how to interact with
an application or server beyond a generic understanding of hypermedia.

👉   HATEOAS guides the client how to deal with the application based on the
current state
    ➤   Provides Dynamic Information about Available Actions in the current
    state of a resource as hyperlinks embedded in the resource representations.

    ➤   Hyperlinks act as control elements. They provide the URIs and HTTP
    methods to use to perform specific transitions or operations.

    ➤   Hyperlinks provided are context-dependent. The possible next steps given
    the current state of the resource.

    Example - A resource in a "pending" state might offer a link to
    "approve" or "reject," while a resource in an "approved" state might offer
    links to "ship" or "cancel."

    Without HATEOAS, the client needs prior knowledge ─ generally a hardcoded
    understanding ─ of the API's URI structure and the transitions between
    states.

    With HATEOAS, the API dynamically informs the client about the available
    actions and prior knowledge about transition(s) is not required.  

    HATEOAS makes the API more 𝗱𝗶𝘀𝗰𝗼𝘃𝗲𝗿𝗮𝗯𝗹𝗲 and allows it to evolve
    without breaking existing clients. The client adapts to changes in the
    API's structure and workflows by following the links provided in the
    current state.

𝚁𝚎𝚜𝚘𝚞𝚛𝚌𝚎
→   The key abstraction of information in REST

𝚁𝚎𝚜𝚘𝚞𝚛𝚌𝚎 𝚁𝚎𝚙𝚛𝚎𝚜𝚎𝚗𝚝𝚊𝚝𝚒𝚘𝚗
→   The state of the resource at any particular time. It comprises ─
    ○   Data
    ○   Metadata
    ○   Hypermedia links for transition to the next desired state

        ʀᴇꜱᴏᴜʀᴄᴇ ɪᴅᴇɴᴛɪꜰɪᴇʀꜱ → Identify each resource

        ​ʜʏᴘᴇʀᴍᴇᴅɪᴀ →
            - Representation: Data format of the resource

            - Media Type: The media type (specified in the Content-Type header
            of the HTTP response) indicates the format of this data. It tells
            the client how the data is structured and how it should be
            interpreted. Examples include application/json, application/xml,
            text/html, image/jpeg, and the vendor-specific types like
            application/vnd.example.user+json.

            - The media type isn't just a label; it points to a specification
            (a set of rules and definitions) that dictates how a client should
            parse, render, or otherwise handle the received data.
                ○ For application/json, the specification defines the JSON
                syntax (objects, arrays, key-value pairs, data types).

                ○ For text/html, the specification defines the HTML markup
                language and how browsers should render it.

                ○ For a custom media type like
                application/vnd.example.user+json, the defining specification
                would detail the structure of the user data (e.g., which fields
                exist, their data types, and their meaning).

            - In a RESTful API, the concept of "hypertext" is extended to
            machine-to-machine interaction. The API doesn't just serve raw
            data; it provides ways for clients to discover and navigate related
            resources and available actions.

            - Every addressable unit of information carries an address, either
            explicitly (e.g., link and id attributes) or implicitly (e.g.,
            derived from the media type definition and representation
            structure).
                Explicitly (e.g., link and id attributes):

                    Link attributes: Inclusion of hyperlinks within the resource representation. These links explicitly point to other related resources or provide the URIs for performing actions on the current resource.
                    For example, a representation of an order might include a <link rel="self" href="/orders/123"> and a <link rel="customer" href="/customers/456">.

                    ID attributes: Resources often have unique identifiers (IDs) within their data structure. While the ID itself isn't the full URI, it's a key piece of information that, combined with the base URI of the resource collection, allows the client to construct the full address of a specific resource.

                Implicitly (e.g., derived from the media type definition and representation structure):

                    Media type definition: The specification of the media type itself can provide implicit information about how resources are related or how to construct URIs.
                    For example, a specific field name within the media type might consistently represent a related resource's ID, and the client knows (based on the media type specification) how to form the URI for that related resource.

                    Representation structure: The way the data is structured in the representation can also implicitly convey relationships.
                    For instance, a nested object within a resource might represent a sub-resource, and the client might have a convention (defined or implied by the API's documentation or the media type) for how to access that sub-resource.


        ꜱᴇʟꜰ-ᴅᴇꜱᴄʀɪᴘᴛɪᴠᴇ →
            - The client does not need to know if a resource is an employee or
            a device. It should act based on the media type associated with the
            resource.

            So in practice, we will create lots of custom media types – usually
            one media type associated with one resource.

            For example, a media type for
            application/vnd.example.employee+json can clearly specify the
            fields relevant to an employee (name, email, department, etc.) and
            their data types. This provides better semantic clarity than using
            a generic media type like application/json without any further
            context.


𝚁𝚎𝚜𝚘𝚞𝚛𝚌𝚎 𝙼𝚎𝚝𝚑𝚘𝚍𝚜
    ○   Used to perform the desired transition between two states of any resource.
    👉   A large number of people wrongly relate resource methods to HTTP
    methods (i.e., GET/PUT/POST/DELETE). Roy Fielding has never mentioned any
    recommendation around which method to use in which condition. All he
    emphasizes is that it should be a uniform interface.

    For example, if we decide that the application APIs will use HTTP POST for
    updating a resource – rather than the more common HTTP PUT – it’s all
    right. Still, the application interface will be RESTful.

    Ideally, everything needed to transition the resource state shall be part
    of the resource representation – including all the supported methods and
    what form they will leave the representation.



╭───────────────╮
│ What is REST? │
╰───────────────╯

•   𝗥epresentational 𝗦tate 𝗧ransfer 𝗔pplication 𝗣rogramming 𝗜nterface
→   Architectural Style ⇔ Designing Networked Applications
•   Communications Protocol
    ○ Stateless
    ○ Client-Server
    ○ Cacheable

𝐂𝐨𝐫𝐞 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬 | 𝐀𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐚𝐥 𝐂𝐨𝐧𝐬𝐭𝐫𝐚𝐢𝐧𝐭𝐬

A truly RESTful API adheres to the following six architectural constraints:

𝟭.  𝗨𝗻𝗶𝗳𝗼𝗿𝗺 𝗜𝗻𝘁𝗲𝗿𝗳𝗮𝗰𝗲
    This is the most fundamental constraint of RESTful API, and implies that
    there should be a consistent way to interact with the server, regardless of
    the device or application.

    This is achieved through several sub-principles:  

    ʀᴇꜱᴏᴜʀᴄᴇ ɪᴅᴇɴᴛɪꜰɪᴄᴀᴛɪᴏɴ: Each resource (data or functionality) is uniquely
    identified using URIs (Uniform Resource Identifiers).
    For example, /users, /products/123.

    🇷​​🇪​​🇸​​🇴​​🇺​​🇷​​🇨​​🇪​ ​🇲​​🇦​​🇳​​🇮​​🇵​​🇺​​🇱​​🇦​​🇹​​🇮​​🇴​​🇳​ ​🇹​​🇭​​🇷​​🇴​​🇺​​🇬​​🇭​ ​🇷​​🇪​​🇵​​🇷​​🇪​​🇸​​🇪​​🇳​​🇹​​🇦​​🇹​​🇮​​🇴​​🇳​​🇸​: Clients interact with resources by
    exchanging representations of those resources. These representations can be
    in various formats like JSON, XML, or HTML. The representation should
    contain enough information for the client to modify or delete the resource
    if they have the necessary permissions.  

    ​🇸​​🇪​​🇱​​🇫​-​🇩​​🇪​​🇸​​🇨​​🇷​​🇮​​🇵​​🇹​​🇮​​🇻​​🇪​ ​🇲​​🇪​​🇸​​🇸​​🇦​​🇬​​🇪​​🇸​: Each message (request and response) contains
    enough information to be understood by the recipient. This often includes
    metadata like content type (e.g., application/json).  

    ​🇭​​🇾​​🇵​​🇪​​🇷​​🇲​​🇪​​🇩​​🇮​​🇦​ ​🇦​​🇸​ ​🇹​​🇭​​🇪​ ​🇪​​🇳​​🇬​​🇮​​🇳​​🇪​ ​🇴​​🇫​ ​🇦​​🇵​​🇵​​🇱​​🇮​​🇨​​🇦​​🇹​​🇮​​🇴​​🇳​ ​🇸​​🇹​​🇦​​🇹​​🇪​ (​🇭​​🇦​​🇹​​🇪​​🇴​​🇦​​🇸​): This is an
    optional but important constraint. It means that the API provides links
    within its responses that guide the client on how to navigate and interact
    with the API. This allows the API to evolve without breaking clients, as
    clients discover available actions dynamically.  

𝟮. 𝗖𝗹𝗶𝗲𝗻𝘁-𝗦𝗲𝗿𝘃𝗲𝗿: The client and the server operate independently. The client is
responsible for the user interface and handling user interaction, while the
server manages the resources and business logic. This separation of concerns
allows each to evolve independently.  

𝟯. 𝗦𝘁𝗮𝘁𝗲𝗹𝗲𝘀𝘀: Each request from the client to the server must contain all the
information needed to understand and process the request. The server does not
store any client context between requests. This makes the API more scalable and
reliable. Session state, if needed, is typically maintained on the client.  

𝟰. 𝗖𝗮𝗰𝗵𝗲𝗮𝗯𝗹𝗲: Responses should be explicitly defined as cacheable or
non-cacheable. If a response is cacheable, the client (or intermediaries) can
store and reuse the response for subsequent identical requests, improving
performance and reducing server load.  

𝟱. 𝗟𝗮𝘆𝗲𝗿𝗲𝗱 𝗦𝘆𝘀𝘁𝗲𝗺: The architecture can be composed of multiple layers
(e.g., client, load balancers, proxies, application servers, databases). A
client should not need to know whether it's communicating directly with the end
server or an intermediary. This improves scalability, security, and flexibility.  

𝟲. 𝗖𝗼𝗱𝗲 𝗼𝗻 𝗗𝗲𝗺𝗮𝗻𝗱 (𝗢𝗽𝘁𝗶𝗼𝗻𝗮𝗹): The server can optionally send executable code
(like Java applets or JavaScript) to the client to extend its functionality.
This constraint is less commonly used due to security concerns.  

In summary, a RESTful API is a way to build web services that are:

• Easy to understand and use: Uses standard HTTP methods and clear resource URIs
• Scalable: Due to the stateless nature and cacheability.  
• Flexible: Supporting various data formats and allowing independent evolution
of clients and servers.  
• Reliable: Statelessness reduces the risk of failures due to server-side state
management.  

By adhering to these principles, RESTful APIs enable the creation of robust,
scalable, and maintainable web applications

╭────────────────────────────────────╮
│ Problems Addressed by RESTful APIs │
╰────────────────────────────────────╯

RESTful APIs solve the problem of building scalable, interoperable, and
maintainable distributed systems by providing a standardized way for different
applications to communicate with each other over a network, typically the
internet

𝟭.  𝗜𝗻𝘁𝗲𝗿𝗼𝗽𝗲𝗿𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗕𝗲𝘁𝘄𝗲𝗲𝗻 𝗗𝗶𝘃𝗲𝗿𝘀𝗲 𝗦𝘆𝘀𝘁𝗲𝗺𝘀

    Problem:    Integrating systems with disparate technologies/languages
    Solution:   Leverages existing and widely adopted web standards like HTTP,
                URIs, and common data formats like JSON and XML.

𝟮.  𝗦𝗰𝗮𝗹𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗮𝗻𝗱 𝗣𝗲𝗿𝗳𝗼𝗿𝗺𝗮𝗻𝗰𝗲:

    Problem:    Maintaining state on the server → resource-intensive.
    Solution:
        Statelessness:
        -   Each request from a client to the server contains all the
        information needed to understand the request.
        -   The server doesn't store any client-specific state between
        requests.
        👉 This makes the server more scalable as it doesn't need to manage
        session information for numerous clients.  

        Cacheability: REST allows responses to be cached by clients or
        intermediaries. This reduces the load on the server and improves
        performance by serving frequently accessed data directly from the
        cache.  

        Layered System: The layered architecture of REST allows for the
        introduction of intermediaries like load balancers and proxies, which
        can further improve scalability and performance

𝟯.  𝗠𝗮𝗶𝗻𝘁𝗮𝗶𝗻𝗮𝗯𝗶𝗹𝗶𝘁𝘆 𝗮𝗻𝗱 𝗘𝘃𝗼𝗹𝘂𝘁𝗶𝗼𝗻:

    Problem:    Tightly coupled systems are often difficult to maintain and
                evolve
    Solution:
        Decoupling: The client-server architecture of REST promotes a
        separation of concerns. Clients and servers can evolve independently as
        long as they adhere to the agreed-upon interface (URIs, HTTP methods,
        and media types).  

        Uniform Interface: The consistent way of interacting with resources
        through standard HTTP methods (GET, POST, PUT, DELETE) and clear URIs
        makes the API easier to understand, document, and maintain.

        HATEOAS (Hypermedia as the Engine of Application State): By providing
        links within responses, the API guides clients on how to interact. This
        reduces the need for clients to have hardcoded knowledge of API
        endpoints and allows the API to evolve its structure without breaking
        existing clients.  

𝟰. 𝗩𝗶𝘀𝗶𝗯𝗶𝗹𝗶𝘁𝘆 𝗮𝗻𝗱 𝗥𝗲𝗹𝗶𝗮𝗯𝗶𝗹𝗶𝘁𝘆:

    Problem: Understanding and monitoring interactions in proprietary systems
            can be challenging.
    Solution:
        Standard Protocols: REST uses standard HTTP, which has well-established monitoring tools and infrastructure. Interactions are easily observable.

        Statelessness: Statelessness can improve reliability as a server crash
        doesn't impact client sessions.  
