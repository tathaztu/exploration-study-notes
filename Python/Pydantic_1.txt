â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Pydantic â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

â—‹ FastAPI is built on Pydantic

â—‹ What is Pydantic?
- A data validation "library"
- Python
- Uses Type Annotations

â€¢ Enforces type hints at runtime
â€¢ User-friendly errors (when data is invalid)
â€¢ Supports vanilla python to define data models (good for starters)

Basic Principle
	â€¢ Define classes with type annotations
	â€¢ Use the classes we defined for parsing and validation

ðŸ‘‰ All Pydantic data models should inherit the BaseModel class 

Simple Example
â—‹ Import the BaseModel class
â—‹ Import the ValidationError exception

from pydantic import BaseModel, ValidationError


dictionary unpack operator (double asterisk)

class Person(BaseModel):
    age: int
    name: str
    is_married: bool

data = {
    'name': 'John',
    'age': 20,
    'is_married': False
}


person = Person(**data)

try:
    person = Person(**data)
    # use the data
 
except ValidationError as e:
    print(e)









































